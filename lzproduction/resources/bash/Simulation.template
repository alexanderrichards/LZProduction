MACRO_FILE=$1
export SEED=$2 # an integer that will label the output file
APP_DIR=/cvmfs/lz.opensciencegrid.org/{{ app }}/release-{{ app_version }}
ROOT_DIR=/cvmfs/lz.opensciencegrid.org/ROOT/v{{ root_version }}/{{ root_arch }}/root
G4_DIR=/cvmfs/lz.opensciencegrid.org/geant4/
G4_VER=geant{{ g4_version }}
SIM_LFN_DIR={{ sim_lfn_outputdir }}/$(basename $MACRO_FILE .mac)
MCTRUTH_LFN_DIR={{ mctruth_lfn_outputdir }}/$(basename $MACRO_FILE .mac)

#extract the name of the output file from the LUXSim macro
{% if app == 'BACCARAT' %}
OUTPUT_FILE=$(awk '/^\/Bacc\/io\/outputName/ {print $2}' $1 | tail -1)$2.bin
{% else%}
OUTPUT_FILE=$(awk '/^\/{{ app }}\/io\/outputName/ {print $2}' $1 | tail -1)$2.bin
{% endif %}

# move into the LUXSim directory, set G4 env, and run the macro
# the executable must be run from within it's dir!
cd $APP_DIR
{% if app == 'BACCARAT' and app_version.startswith('2') %}
source setup.sh
stop_on_error $APP_DIR/bin/{{ app }}Executable $OUTPUT_DIR/$MACRO_FILE "Simulation step failed!"
{% elif app == 'BACCARAT' and app_version.startswith('3') %}
source setup.sh
stop_on_error $APP_DIR/build.x86_64-slc6-gcc48-opt/bin/{{ app }}Executable $OUTPUT_DIR/$MACRO_FILE "Simulation step failed!"
{% else %}
source $G4_DIR/etc/geant4env.sh $G4_VER
stop_on_error $APP_DIR/{{ app }}Executable $OUTPUT_DIR/$MACRO_FILE "Simulation step failed!"
{% endif %}

cd $OUTPUT_DIR
# check output file exists.
stop_on_error ls *.bin "BINARY FILE DOES not EXIST"

# after macro has run, rootify
{% if app == 'BACCARAT' %}
{% if app_version.startswith('2') %}
stop_on_error $APP_DIR/bin/BaccRootConverter $OUTPUT_FILE "Failed Rootify step!"
{% elif app_version.startswith('3') %}
stop_on_error $APP_DIR/build.x86_64-slc6-gcc48-opt/bin/BaccRootConverter $OUTPUT_FILE "Failed Rootify step!"
{% else %}
source $ROOT_DIR/bin/thisroot.sh
stop_on_error $APP_DIR/tools/BaccRootConverter $OUTPUT_FILE "Failed Rootify step!"
{% endif %}
{% else %}
source $ROOT_DIR/bin/thisroot.sh
stop_on_error `ls $APP_DIR/tools/*RootReader` $OUTPUT_FILE "Failed Rootify step!"
{% endif %}
SIM_OUTPUT_FILE=$(basename $OUTPUT_FILE .bin).root
stop_on_error ls $SIM_OUTPUT_FILE "OUTPUT_ROOT_FILE does not exist"

{% if app == 'BACCARAT' and app_version.startswith('2') %}
#stop_on_error `ls $APP_DIR/bin/*MCTruth` $SIM_OUTPUT_FILE "MCTruth step failed!"
{% elif app == 'BACCARAT' and app_version.startswith('3') %}
stop_on_error $APP_DIR/build.x86_64-slc6-gcc48-opt/bin/BaccMCTruth $SIM_OUTPUT_FILE "MCTruth step failed!"
{% else %}
#stop_on_error `ls $APP_DIR/tools/*MCTruth` $SIM_OUTPUT_FILE "MCTruth step failed!"
{% endif %}
#MCTRUTH_OUTPUT_FILE=$(ls *_mctruth.root)
